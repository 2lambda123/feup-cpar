oldProductScores <- c(0.7, 0.5, 0.2, 0.8, 0.2, 0.5, 0.4, 0.4, 0.1, 0.2)
mean(oldProductScores)
var(oldProductScores)
sd(oldProductScores)
> n = c(2, 3, 5)
> s = c("aa", "bb", "cc", "dd", "ee")
> b = c(TRUE, FALSE, TRUE, FALSE, FALSE)
> x = list(n, s, b)
n = c(2, 3, 5)
s = c("aa", "bb", "cc", "dd", "ee")
b = c(TRUE, FALSE, TRUE, FALSE, FALSE)
x = list(n, s, b)
x
productsA <- list(c(1), c(3), c(3), 1:10)
productsA
for (x in productsA) print(x)
?mapply
freqsB <- c(0.1, 0.2, 0.2, 0.5)
freqsC <- c(0.5, 0.2, 0.2, 0.1)
mapply(function(x,y) {print(x)})
mapply(function(x,y)
{
print(x)
print(y)
print("\n")
}, x=freqB, y=freqC)
mapply(function(x,y)
{
print(x)
print(y)
print("\n")
}, x=freqsB, y=freqsC)
mapply(function(x,y)
{
print(x)
print(y)
}, x=freqsB, y=freqsC)
a <- mapply(function(x,y)
{
print(x)
print(y)
}, x=freqsB, y=freqsC)
a
mean(c(0.2 , 0.7, 0.4, 0.2, 0.3, 0.2))
var(c(0.2 , 0.7, 0.4, 0.2, 0.3, 0.2))
var(c(0.2 , 0.9, 0.4, 0.2, 0.3, 0.2))
var(c(0.4 , 0.7, 0.4, 0.2, 0.3, 0.2))
ifelse("Female", 0, 1)
a <- c("Male", "Female", "Male")
ifelse(a == "Male", 1, 0)
list(lol = 2)
pato <- 2
list(pato)
stop("lol")
lol <- c(1,2,3)
dims(lol)
dim(lol)
lol <- as.character(lol)
lol
dim(lol)
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
lol <- c("pos", "neg", "pos", "neg", "neg")
lol2 <- c("pos", "pos", "neg", "pos", "neg")
length(lol)
length(lol2)
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
lol <- as.factor(lol)
lol2 <- as.factor(lol2)
lol
lol2
validationStatistics(lol, lol2, "pos", "neg")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
library(caret)
confusionMatrix(lol, lol2)
confusionMatrix(lol, lol2, "pos")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
confusionMatrix(lol, lol2, "pos")
confusionMatrix(lol, lol2, "pos")
validationStatistics(lol, lol2, "pos", "neg")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
result <- confusionMatrix(lol, lol2, "pos")
precision <- result$byClass['Pos Pred Value']
result$byClass['Pos Pred Value']
result$byClass['Sensitivity']
result <- confusionMatrix(lol, lol2, "neg")
result$byClass['Pos Pred Value']
result$byClass['Sensitivity']
validationStatistics(lol, lol2, "neg", "pos")
lol <- as.factor(c("pos", "neg", "pos", "neg", "neg"))
lol2 <- as.factor(c("pos", "pos", "neg", "pos", "neg"))
confusionMatrix(lol, lol2, "pos")
library(confusionMatrix)
library(confusionMatrix)
library(caret)
confusionMatrix(lol, lol2, "pos")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
confusionMatrix(lol, lol2, positiveClass)
confusionMatrix(lol, lol2, "pos")
install.packages(c("car", "caret", "curl", "effects", "ggplot2", "gplots", "gridExtra", "gtable", "htmltools", "htmlwidgets", "lava", "lme4", "multcomp", "munsell", "mvtnorm", "NLP", "openNLP", "openssl", "plotly", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "scales", "swirl", "testthat", "tidyr", "viridis", "XML", "xtable"))
4294967296 < 2147483647
demo()
View(my_data)
View(test)
2^#
2^3
3 + (5-3)/2
2/3
3 + (5-3)/2
2 + (5 - 3 % 5)
2 + (5 - 3 %% 5)
2 + (5 - 2 %% 5)
8 + (5 - 8 %% 5)
5 + (5 - 5 %% 5)
8 + (5 - 8 %% 5)
0 + (5 - 0 %% 5)
0 %% 0
0 %% 5
0 %% 5
8 + (5 - (8 %% 5))
10 + (5 - (10 %% 5))
0 + (2 - 0)/1
2 + (4 - 2)/2
install.packages(c("BH", "DBI", "evaluate", "formatR", "highr", "jsonlite", "knitr", "multcomp", "openssl", "plotrix", "RcppArmadillo", "rmarkdown", "slam", "testthat", "zoo"))
26/44
36/44
library(tidyr)
library(dplyr)
library(ggplot2)
R.version
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if on
updateR()
library(tidyr)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
# Format numbers:
#options(digits)
# Import:
data_general <- tbl_df(read.csv("csv/output_seq_par_mpi.csv"))
data_mpi_mp <- tbl_df(read.csv("csv/output_mpi_mp.csv"))
data_general$alg <- factor(data_general$alg)
data_mpi_mp$alg <- factor(data_mpi_mp$alg)
data_general$threads <- factor(data_general$threads)
data_mpi_mp$threads <- factor(data_mpi_mp$threads)
data_general$proc <- factor(data_general$proc)
data_mpi_mp$proc <- factor(data_mpi_mp$proc)
# Calculate Speedup:
sequential_times <- data_general %>% filter(alg == 0) %>% `$`(time)
data_general <- data_general %>% mutate(Speedup = sequential_times / time)
data_mpi_mp <- data_mpi_mp %>% mutate(Speedup = sequential_times / time)
rm(sequential_times)
# Grafico global
data <- data_general %>% filter(alg == 0 | (alg == 1 & threads == 8) | (alg == 2 & proc == 16))
ggplot(data, aes(x=n, y=time, color=alg)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Tempo de execução (s)")
ggsave("plots/plot_global.pdf", width=9, height=3)
# Gráfico do OpenMP - SpeedUp
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=9, height=3)
# Gráfico do MPI - SpeedUp
data <- data_general %>% filter(alg == 2)
ggplot(data, aes(x=n, y=Speedup, color=proc)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
# Gráfico do MPI/MP - SpeedUp
data <- data_mpi_mp
ggplot(data, aes(x=n, y=Speedup, color=paste(proc, threads))) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
setwd("~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2")
library(tidyr)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
# Format numbers:
#options(digits)
# Import:
data_general <- tbl_df(read.csv("csv/output_seq_par_mpi.csv"))
data_mpi_mp <- tbl_df(read.csv("csv/output_mpi_mp.csv"))
data_general$alg <- factor(data_general$alg)
data_mpi_mp$alg <- factor(data_mpi_mp$alg)
data_general$threads <- factor(data_general$threads)
data_mpi_mp$threads <- factor(data_mpi_mp$threads)
data_general$proc <- factor(data_general$proc)
data_mpi_mp$proc <- factor(data_mpi_mp$proc)
# Calculate Speedup:
sequential_times <- data_general %>% filter(alg == 0) %>% `$`(time)
data_general <- data_general %>% mutate(Speedup = sequential_times / time)
data_mpi_mp <- data_mpi_mp %>% mutate(Speedup = sequential_times / time)
rm(sequential_times)
# Grafico global
data <- data_general %>% filter(alg == 0 | (alg == 1 & threads == 8) | (alg == 2 & proc == 16))
ggplot(data, aes(x=n, y=time, color=alg)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Tempo de execução (s)")
ggsave("plots/plot_global.pdf", width=9, height=3)
# Gráfico do OpenMP - SpeedUp
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=9, height=3)
# Gráfico do MPI - SpeedUp
data <- data_general %>% filter(alg == 2)
ggplot(data, aes(x=n, y=Speedup, color=proc)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
# Gráfico do MPI/MP - SpeedUp
data <- data_mpi_mp
ggplot(data, aes(x=n, y=Speedup, color=paste(proc, threads))) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
data <- data_mpi_mp
ggplot(data, aes(x=n, y=Speedup, color=proc)) +
geom_point(alpha=0.75) + geom_line(aes(linetype=threads), alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
data <- data_mpi_mp
ggplot(data, aes(x=n, y=Speedup, group=paste(proc, threads), color=proc)) +
geom_point(alpha=0.75) + geom_line(aes(linetype=threads), alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
data <- data_mpi_mp
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(aes(linetype=proc), alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
data <- data_mpi_mp %>% filter(proc == 4)
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
data <- data_mpi_mp %>% filter(proc == 4)
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
data <- data_mpi_mp %>% filter(proc == 5)
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
data <- data_mpi_mp %>% filter(proc == 8)
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
data <- data_mpi_mp %>% filter(proc == 12)
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
# Gráfico do MPI/MP - SpeedUp
data <- data_mpi_mp %>% filter(proc == 16)
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
library(tidyr)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
# Format numbers:
#options(digits)
# Import:
data_general <- tbl_df(read.csv("csv/output_seq_par_mpi.csv"))
data_mpi_mp <- tbl_df(read.csv("csv/output_mpi_mp.csv"))
data_general$alg <- factor(data_general$alg)
data_mpi_mp$alg <- factor(data_mpi_mp$alg)
data_general$threads <- factor(data_general$threads)
data_mpi_mp$threads <- factor(data_mpi_mp$threads)
data_general$proc <- factor(data_general$proc)
data_mpi_mp$proc <- factor(data_mpi_mp$proc)
# Calculate Speedup:
sequential_times <- data_general %>% filter(alg == 0) %>% `$`(time)
data_general <- data_general %>% mutate(Speedup = sequential_times / time)
data_mpi_mp <- data_mpi_mp %>% mutate(Speedup = sequential_times / time)
rm(sequential_times)
# Grafico global
data <- data_general %>% filter(alg == 0 | (alg == 1 & threads == 8) | (alg == 2 & proc == 16))
ggplot(data, aes(x=n, y=time, color=alg)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Tempo de execução (s)")
ggsave("plots/plot_global.pdf", width=9, height=3)
# Gráfico do OpenMP - SpeedUp
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=9, height=3)
# Gráfico do MPI - SpeedUp
data <- data_general %>% filter(alg == 2)
ggplot(data, aes(x=n, y=Speedup, color=proc)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
# Gráfico do MPI/MP - SpeedUp
ggplot(data_mpi_mp %>% filter(proc == 4), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_hybrid_4.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 8), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_hybrid_8.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 12), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_hybrid_12.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 16), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_hybrid_16.pdf", width=4*1.5, height=3*1.5)
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
# Gráfico do MPI/MP - SpeedUp
ggplot(data_mpi_mp %>% filter(proc == 4), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de threads")) +
ggsave("plots/plot_hybrid_4.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 8), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_hybrid_8.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 12), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_hybrid_12.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 16), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_hybrid_16.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 4), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº\nde\nthreads")) +
ggsave("plots/plot_hybrid_4.pdf", width=4*1.5, height=3*1.5)
# Gráfico do MPI/MP - SpeedUp
ggplot(data_mpi_mp %>% filter(proc == 4), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_4.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 4), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_4.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 8), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_8.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 12), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_12.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 16), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_16.pdf", width=4*1.5, height=3*1.5)
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=9, height=3)
data <- data_general %>% filter(alg == 2)
ggplot(data, aes(x=n, y=Speedup, color=proc)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_1.1.pdf", width=4*1.5, height=3*1.5)
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_mp.pdf", width=9, height=3)
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
scale_y_continuous(limits = c(1, 1.5))
ggsave("plots/plot_mp.pdf", width=9, height=3)
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
scale_y_continuous(limits = c(1, 1.9))
ggsave("plots/plot_mp.pdf", width=9, height=3)
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
scale_y_continuous(limits = c(1, 1.4))
ggsave("plots/plot_mp.pdf", width=9, height=3)
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
scale_y_continuous(limits = c(1.1, 1.4))
ggsave("plots/plot_mp.pdf", width=9, height=3)
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
scale_y_continuous(limits = c(1.1, 1.35))
ggsave("plots/plot_mp.pdf", width=9, height=3)
data <- data_general %>% filter(alg == 0 | (alg == 1 & threads == 8) | (alg == 2 & proc == 16))
ggplot(data, aes(x=n, y=time, color=alg)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Tempo de execução (s)")
ggsave("plots/plot_global.pdf", width=9, height=3)
library(tidyr)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
# Format numbers:
#options(digits)
# Import:
data_general <- tbl_df(read.csv("csv/output_seq_par_mpi.csv"))
data_mpi_mp <- tbl_df(read.csv("csv/output_mpi_mp.csv"))
data_general$alg <- factor(data_general$alg)
data_mpi_mp$alg <- factor(data_mpi_mp$alg)
data_general$threads <- factor(data_general$threads)
data_mpi_mp$threads <- factor(data_mpi_mp$threads)
data_general$proc <- factor(data_general$proc)
data_mpi_mp$proc <- factor(data_mpi_mp$proc)
# Calculate Speedup:
sequential_times <- data_general %>% filter(alg == 0) %>% `$`(time)
data_general <- data_general %>% mutate(Speedup = sequential_times / time)
data_mpi_mp <- data_mpi_mp %>% mutate(Speedup = sequential_times / time)
rm(sequential_times)
# Grafico global
data <- data_general %>% filter(alg == 0 | (alg == 1 & threads == 8) | (alg == 2 & proc == 16))
ggplot(data, aes(x=n, y=time, color=alg)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Tempo de execução (s)")
ggsave("plots/plot_global.pdf", width=9, height=3)
# Gráfico do OpenMP - SpeedUp
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
scale_y_continuous(limits = c(1.1, 1.35))
ggsave("plots/plot_mp.pdf", width=9, height=3)
# Gráfico do MPI - SpeedUp
data <- data_general %>% filter(alg == 2)
ggplot(data, aes(x=n, y=Speedup, color=proc)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_mpi.pdf", width=4*1.5, height=3*1.5)
# Gráfico do MPI/MP - SpeedUp
ggplot(data_mpi_mp %>% filter(proc == 4), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_4.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 8), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_8.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 12), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_12.pdf", width=4*1.5, height=3*1.5)
ggplot(data_mpi_mp %>% filter(proc == 16), aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_16.pdf", width=4*1.5, height=3*1.5)
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Speedup, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
scale_y_continuous(limits = c(1.1, 1.35))
ggsave("plots/plot_mp.pdf", width=9, height=3)
data <- data_general %>% filter(alg == 0 | (alg == 1 & threads == 8) | (alg == 2 & proc == 16))
ggplot(data, aes(x=n, y=time, color=alg)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Tempo de execução (s)")
ggsave("plots/plot_global.pdf", width=9, height=3)
?write.csv
write.csv(data_general, "LOL.csv", col.names = FALSE)
write.csv(data_general, "LOL.csv", col.names = FALSE)
write.csv(data_general, "LOL.csv", row.names = FALSE)
