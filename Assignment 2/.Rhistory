nrow(data)
table(sample(1:k, 10, replace=TRUE))
table(sample(1:k, 10, replace=TRUE))
table(sample(1:k, 10, replace=TRUE))
table(sample(1:k, 10, replace=TRUE))
table(sample(1:k, 10, replace=TRUE))
table(sample(1:k, 150, replace=TRUE))
table(sample(1:k, 150, replace=TRUE))
table(sample(1:k, 150, replace=TRUE))
table(sample(1:k, 150, replace=TRUE))
table(sample(1:k, 150, replace=TRUE))
table(sample(1:k, 150, replace=TRUE))
table(sample(1:k, 150, replace=TRUE))
table(sample(1:k, 150, replace=TRUE))
table(sample(1:k, 150, replace=TRUE))
table(sample(1:k, 150, replace=TRUE))
?lapply
library(caret)
data(iris)
train_control <- trainControl(method="cv", number=10)
model <- train(Species~., data=iris, trControl=train_control, method="glm", family=binomial)
?train
library(Amelia)
missmap(Iris)
missmap(iris)
library(caret)
data(iris)
train_control <- trainControl(method="cv", number=10)
model <- train(Species~., data=iris, trControl=train_control, method="glm")
warnings()
library(caret)
data(iris)
train_control <- trainControl(method="cv", number=10)
model <- train(Species ~ ., data=iris, method="glm", family=binomial, trControl=train_control)
data(iris)
train_control <- trainControl(method="cv", number=10)
model <- train(Species ~ ., data=iris, method="glm", family=binomial, trControl=train_control)
library(caret)
data(iris)
train_control = trainControl(method="cv", number=5)
modelLog = train(formula, data=train, method="glm", family=binomial, trControl=train_control)
View(iris)
data(iris)
train_control = trainControl(method="cv", number=5)
modelLog = train(Species ~ ., data=iris, method="glm", family=binomial, trControl=train_control)
library(caret)
data(iris)
train_control <- trainControl(method="cv", number=5)
modelLog <- train(Species ~ ., data=iris, method="glm", family=binomial, trControl=train_control)
library(caret)
library(ISLR)
train.index <- sample(nrow(Default), 0.7 * nrow(Default))
train <- Default[train.index,]
test <- Default[-train.index,]
dim(train)
dim(test)
library(caret)
library(ISLR)
dim(Default)
library(caret)
library(ISLR)
### 1 - Dataset: predict if a given user will fail the credit payment
# Calculate AUC function:
library(ROCR)
calculateAuc <- function(predictedValues, trueValues)
{
pr <- prediction(predictedValues, trueValues)
prf <- performance(pr, measure = "tpr", x.measure="fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
}
#### 1.1. - Build a model with 20% test set ("a fold")
# Build training set:
train.index <- sample(nrow(Default), 0.2 * nrow(Default))
train <- Default[train.index,]
# Build test set:
test <- Default[-train.index,]
dim(train)
dim(test)
# Build the model:
glm.fit <- glm(default ~ ., data=train, family=binomial)
summary(glm.fit)
glm.fit <- glm(default ~ . - income, data=train, family=binomial)
summary(glm.fit)
#### 1.2. - Build a model with k-fold cross validation (k=5)
train_control <- trainControl(method="cv", number=5)
glm.fit2 <- train(default ~ ., data=Default, trControl=train_control)
glm.fit2
nrow(Default)
?mtry
# Script from: http://machinelearningmastery.com/how-to-estimate-model-accuracy-in-r-using-the-caret-package/
library(caret)
# load the iris dataset
data(iris)
# define training control
train_control <- trainControl(method="cv", number=10)
# fix the parameters of the algorithm
grid <- expand.grid(.fL=c(0), .usekernel=c(FALSE))
model <- train(Species~., data=iris, trControl=train_control, method="nb", tuneGrid=grid)
print(model)
source('~/Faculdade/Data Mining/R scripts/IEEE Data Mining/sessao3.R')
source('~/Faculdade/Data Mining/R scripts/IEEE Data Mining/sessao3.R')
source('~/Faculdade/Data Mining/R scripts/IEEE Data Mining/sessao3.R')
source('~/Faculdade/Data Mining/R scripts/IEEE Data Mining/sessao3.R')
set.seed(17)
cv.error.10 <- rep(0,10)
for (i in 1:10) {
glm.fit=glm(mpg ~ poly(horsepower ,i),data=Auto)
cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
library(ISLR)
set.seed(17)
cv.error.10 <- rep(0,10)
for (i in 1:10) {
glm.fit=glm(mpg ~ poly(horsepower ,i),data=Auto)
cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
??cv.gml
??cv.glm
library(boot)
library(ISLR)
library(boot)
set.seed(17)
cv.error.10 <- rep(0,10)
for (i in 1:10) {
glm.fit=glm(mpg ~ poly(horsepower ,i),data=Auto)
cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
print(cv.error.10)
plot(cv.error.10)
?cv.glm
library(ISLR)
library(boot)
?cv.glm
summary(Auto)
library(ISLR)
library(boot)
set.seed(17)
cv.error.10 <- rep(0,10)
for (i in 1:10) {
glm.fit=glm(mpg ~ poly(horsepower ,i),data=Auto)
cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
print(cv.error.10)
plot(cv.error.10)
plot(cv.error.10)
plot(cv.error.10)
library(ISLR)
library(boot)
set.seed(17)
cv.error.10 <- rep(0,10)
for (i in 1:10) {
for (i in 1:10) {
glm.fit=glm(mpg ~ poly(horsepower ,i),data=Auto)
cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
print(cv.error.10)
plot(cv.error.10)
library(ISLR)
library(boot)
set.seed(17)
cv.error.10 <- rep(0,10)
for (i in 1:10) {
glm.fit=glm(mpg ~ poly(horsepower ,i),data=Auto)
cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
print(cv.error.10)
plot(cv.error.10)
library(ggplot2)
library(dplyr)
data <- read.csv("output.csv")
names(data) <- c("Language", "Algorithm", "Thread number", "N", "Time", "L1", "L2");
timeCppJava <- filter(data, Language == "C++")
data$Algorithm <- ifelse("1", "LineMult", "Mult")
var(c(0,0,0,0,1,1,1,1))
var(c(0,0,0,0.5,0.5,1,1,1))
var(c(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1))
var(c(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1))
a <- [1,2,3]
a <- c(c(1,2),3,4)
a
a <- c(c(1,2),c(3),c(4))
a
?list
list(c(1,c(2,3))
)
list(c(1,list(c(2,3))))
list(c(1,list(c(2,3))))
a <- list(c(1,list(c(2,3))))
a[[1]]
a[[1]][[2]]
a[1][2]
a[1][1]
oldProductScores <- c(0.7, 0.5, 0.2, 0.8, 0.2, 0.5, 0.4, 0.4, 0.1, 0.2)
mean(oldProductScores)
var(oldProductScores)
sd(oldProductScores)
> n = c(2, 3, 5)
> s = c("aa", "bb", "cc", "dd", "ee")
> b = c(TRUE, FALSE, TRUE, FALSE, FALSE)
> x = list(n, s, b)
n = c(2, 3, 5)
s = c("aa", "bb", "cc", "dd", "ee")
b = c(TRUE, FALSE, TRUE, FALSE, FALSE)
x = list(n, s, b)
x
productsA <- list(c(1), c(3), c(3), 1:10)
productsA
for (x in productsA) print(x)
?mapply
freqsB <- c(0.1, 0.2, 0.2, 0.5)
freqsC <- c(0.5, 0.2, 0.2, 0.1)
mapply(function(x,y) {print(x)})
mapply(function(x,y)
{
print(x)
print(y)
print("\n")
}, x=freqB, y=freqC)
mapply(function(x,y)
{
print(x)
print(y)
print("\n")
}, x=freqsB, y=freqsC)
mapply(function(x,y)
{
print(x)
print(y)
}, x=freqsB, y=freqsC)
a <- mapply(function(x,y)
{
print(x)
print(y)
}, x=freqsB, y=freqsC)
a
mean(c(0.2 , 0.7, 0.4, 0.2, 0.3, 0.2))
var(c(0.2 , 0.7, 0.4, 0.2, 0.3, 0.2))
var(c(0.2 , 0.9, 0.4, 0.2, 0.3, 0.2))
var(c(0.4 , 0.7, 0.4, 0.2, 0.3, 0.2))
ifelse("Female", 0, 1)
a <- c("Male", "Female", "Male")
ifelse(a == "Male", 1, 0)
list(lol = 2)
pato <- 2
list(pato)
stop("lol")
lol <- c(1,2,3)
dims(lol)
dim(lol)
lol <- as.character(lol)
lol
dim(lol)
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
lol <- c("pos", "neg", "pos", "neg", "neg")
lol2 <- c("pos", "pos", "neg", "pos", "neg")
length(lol)
length(lol2)
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
lol <- as.factor(lol)
lol2 <- as.factor(lol2)
lol
lol2
validationStatistics(lol, lol2, "pos", "neg")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
library(caret)
confusionMatrix(lol, lol2)
confusionMatrix(lol, lol2, "pos")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
confusionMatrix(lol, lol2, "pos")
confusionMatrix(lol, lol2, "pos")
validationStatistics(lol, lol2, "pos", "neg")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
result <- confusionMatrix(lol, lol2, "pos")
precision <- result$byClass['Pos Pred Value']
result$byClass['Pos Pred Value']
result$byClass['Sensitivity']
result <- confusionMatrix(lol, lol2, "neg")
result$byClass['Pos Pred Value']
result$byClass['Sensitivity']
validationStatistics(lol, lol2, "neg", "pos")
lol <- as.factor(c("pos", "neg", "pos", "neg", "neg"))
lol2 <- as.factor(c("pos", "pos", "neg", "pos", "neg"))
confusionMatrix(lol, lol2, "pos")
library(confusionMatrix)
library(confusionMatrix)
library(caret)
confusionMatrix(lol, lol2, "pos")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
source('~/Faculdade/4º Ano/2º Semestre/ECDII/ecd2-git/validation_script_miguel.R')
validationStatistics(lol, lol2, "pos", "neg")
confusionMatrix(lol, lol2, positiveClass)
confusionMatrix(lol, lol2, "pos")
install.packages(c("car", "caret", "curl", "effects", "ggplot2", "gplots", "gridExtra", "gtable", "htmltools", "htmlwidgets", "lava", "lme4", "multcomp", "munsell", "mvtnorm", "NLP", "openNLP", "openssl", "plotly", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "scales", "swirl", "testthat", "tidyr", "viridis", "XML", "xtable"))
4294967296 < 2147483647
demo()
View(my_data)
View(test)
2^#
2^3
3 + (5-3)/2
2/3
3 + (5-3)/2
2 + (5 - 3 % 5)
2 + (5 - 3 %% 5)
2 + (5 - 2 %% 5)
8 + (5 - 8 %% 5)
5 + (5 - 5 %% 5)
8 + (5 - 8 %% 5)
0 + (5 - 0 %% 5)
0 %% 0
0 %% 5
0 %% 5
8 + (5 - (8 %% 5))
10 + (5 - (10 %% 5))
0 + (2 - 0)/1
2 + (4 - 2)/2
install.packages(c("BH", "DBI", "evaluate", "formatR", "highr", "jsonlite", "knitr", "multcomp", "openssl", "plotrix", "RcppArmadillo", "rmarkdown", "slam", "testthat", "zoo"))
26/44
36/44
library(tidyr)
library(dplyr)
library(ggplot2)
R.version
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if on
updateR()
208 %% 8
208 %% 8
(2^25)/16 > sqrt((2^25))
(2^32)/16 > sqrt((2^32))
?log
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
setwd("~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2")
setwd("~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2")
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
data <- data_general %>% filter(alg == 0 | (alg == 1 & threads == 8) | (alg == 2 & proc == 16))
ggplot(data, aes(x=n, y=time, color=alg)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Tempo de execução (s)")
ggsave("plots/plot_global.pdf", width=9, height=3)
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Ops, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
scale_y_continuous(limits = c(1.1, 1.35))
ggsave("plots/plot_mp.pdf", width=9, height=3)
data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
data_general %>% filter(alg == 1 & threads != '1' & threads != '0') %>% View
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Ops, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
scale_y_continuous(limits = c(1.1, 1.35))
ggsave("plots/plot_mp.pdf", width=9, height=3)
data <- data_general %>% filter(alg == 2)
ggplot(data, aes(x=n, y=Ops, color=proc)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
labs(x="N", y="Speedup")
ggsave("plots/plot_mpi.pdf", width=4*1.5, height=3*1.5)
ggplot(data_general %>% filter(alg == 3 & proc == 8), aes(x=n, y=Ops, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_8.pdf", width=4*1.5, height=3*1.5)
ggplot(data_general %>% filter(alg == 3 & proc == 12), aes(x=n, y=Ops, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_12.pdf", width=4*1.5, height=3*1.5)
ggplot(data_general %>% filter(alg == 3 & proc == 16), aes(x=n, y=Ops, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_16.pdf", width=4*1.5, height=3*1.5)
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Ops, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
scale_y_continuous(limits = c(1.1, 1.35))
ggsave("plots/plot_mp.pdf", width=9, height=3)
data_general <- data_general %>% mutate(Speedup = sequential_times / time,
Ops = (n * log(log(n))) / time)
sequential_times <- data_general %>% filter(alg == 0) %>% `$`(time)
data_general <- data_general %>% mutate(Speedup = sequential_times / time,
Ops = (n * log(log(n))) / time)
rm(sequential_times)
data <- data_general %>% filter(alg == 1 & threads != '1' & threads != '0')
ggplot(data, aes(x=n, y=Ops, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_mp.pdf", width=9, height=3)
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
ggplot(data_general %>% filter(alg == 3 & proc == 4), aes(x=n, y=Ops, color=threads)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup") +
guides(color=guide_legend(title="Nº de\nthreads")) +
ggsave("plots/plot_hybrid_4.pdf", width=4*1.5, height=3*1.5)
data <- data_general %>% filter(alg == 0)
ggplot(data, aes(x=n, y=Ops)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75) +
labs(x="N", y="Speedup")
ggsave("plots/plot_seq.pdf", width=9, height=3)
?log
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
(2^32 * log(log(2^32)))
as.numeric(13311061352)
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
2^n
2^3
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
?ave
?all
data_general <- tbl_df(read.csv("csv/output_18_Maio_I003.csv"))
data_general <- data_general %>% filter(ifelse(alg == 1 & threads == 0))
data_general <- data_general %>% filter(!(alg == 1 & threads == 0))
data_general <- tbl_df(read.csv("csv/output_18_Maio_I003.csv"))
data_general <- data_general %>% filter(!(alg == 1 & threads == 0))
data_general <- data_general %>% mutate(threads = ifelse(threads == 0, 1, threads),
proc = ifelse(proc == 0, 1, proc))
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
library(tidyr)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
# Format numbers:
#options(digits)
# Import and redefine some values:
data_general <- tbl_df(read.csv("csv/output_18_Maio_I003.csv"))
data_general <- data_general %>% filter(!(alg == 1 & threads == 0))
data_general <- data_general %>% mutate(threads = ifelse(threads == 0, 1, threads),
proc = ifelse(proc == 0, 1, proc))
# Calculate Speedup:
sequential_times <- data_general %>% filter(alg == 0) %>% `$`(time)
data_general <- data_general %>% mutate(Speedup = sequential_times / time,
Gops = ((2^n * log(log(2^n))) / time) / 10^9)
Effiency = Speedup / (proc * threads)
rm(sequential_times)
sequential_times <- data_general %>% filter(alg == 0) %>% `$`(time)
data_general <- data_general %>% mutate(Speedup = sequential_times / time,
Gops = ((2^n * log(log(2^n))) / time) / 10^9)
Effiency = Speedup / (proc * threads)
rm(sequential_times)
sequential_times <- data_general %>% filter(alg == 0) %>% `$`(time)
data_general <- data_general %>%
mutate(Speedup = sequential_times / time,
Gops = ((2^n * log(log(2^n))) / time) / 10^9) %>%
mutate(Effiency = Speedup / (proc * threads))
rm(sequential_times)
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
1/2/3
1(2*3)
1/(2*3)
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
seq_times <- data_general %>% filter(alg == 2) %%> `$`(time)
seq_times <- data_general %>% filter(alg == 2) %>% `$`(time)
seq_times <- data_general %>% filter(alg == 2 & threads == 1) %>% `$`(time)
seq_times <- data_general %>% filter(alg == 2 & procv == 1) %>% `$`(time)
seq_times <- data_general %>% filter(alg == 2 & proc == 1) %>% `$`(time)
data_general %>% filter(alg == 2) %>% mutate(LOL = seq_times / time)
data2 <- data_general %>% filter(alg == 2) %>% mutate(LOL = seq_times / time)
ggplot(data2, aes(x=n, y=Speedup, color=proc)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
#labs(x="N", y="Speedup")
ggsave("plots/plot_mpi.pdf", width=4*1.5, height=3*1.5)
data <- data_general %>% filter(alg == 2)
ggplot(data, aes(x=n, y=Speedup, color=proc)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
#labs(x="N", y="Speedup")
ggsave("plots/plot_mpi1.pdf", width=4*1.5, height=3*1.5)
data <- data_general %>% filter(alg == 2)
ggplot(data, aes(x=n, y=Speedup, color=proc)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
#labs(x="N", y="Speedup")
ggsave("plots/plot_mpi1.pdf", width=4*1.5, height=3*1.5)
ggplot(data2, aes(x=n, y=Speedup, color=proc)) +
geom_point(alpha=0.75) + geom_line(alpha=0.75, size=0.2) +
#labs(x="N", y="Speedup")
ggsave("plots/plot_mpi2.pdf", width=4*1.5, height=3*1.5)
data2
View(data2)
source('~/Faculdade/4º Ano/2º Semestre/CPAR/feup-cpar.git/Assignment 2/plots/analysis.R')
